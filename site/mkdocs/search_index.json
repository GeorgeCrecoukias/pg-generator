{
    "docs": [
        {
            "location": "/", 
            "text": "Template Based Scaffolding for PostgreSQL\n\n\npg-generator\n is a command line utility which generates files for each table and schema of a PostgreSQL database.\n\n\n\n\n\nReverse engineers PostgreSQL database,\n\n\nExecutes \nnunjucks\n templates for each table, schema and for database,\n\n\nMakes database objects available to templates using \npg-structure\n.\n\n\n\n\npg-generator takes your burden of manually creating ORM files or any other files which are based on database structure.\n\n\nInstallation\n\n\n$ npm install -g pg-generator\n\n\n\nSequelize Example\n\n\n$ pgen template sequelize -t sequelize-template\n$ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model\n\n\n\nFirst command copies one of the builtin templates (sequelize) into target directory (sequelize-template). Second command generates files based on given template (sequelize-template) into target directory (model).  \n\n\nBasic Usage\n\n\n\n\nUse \npgen template\n to copy one of the builtin templates or create your own template. (You can use base template for starting up.)\n\n\nUse \npgen exec\n to create files based on your template.\n\n\n\n\nTemplate\n\n\nCreating a template from scratch is easy. Execute command below:\n\n\n$ pgen template base -t my-template\n\n\n\nTo see a basic example execute following command from shell and examine files in tutorial-example directory. \n\n\n$ pgen template tutorial -t tutorial-template\n\n\n\nFor a full fledged example which we use at Fortibase, see Sequelize Example above. \n\n\nFull Documentation\n\n\nDocumentation is available on \npg-generator.com\n\n\nSpecial Thanks\n\n\npg-structure\n is developed under sponsorship of \nFortibase\n and released as open source. See \nlicense\n.\n\n\nAlso documentation is auto generated thanks to:\n\n\n\n\nMkDocs\n using a \ntheme\n provided by \nRead the Docs\n.\n\n\nMarkdown is generated by \njsdoc-to-markdown\n\n\n\n\nContributions\n\n\n\n\nFor contribution please send pull requests with tests on \nGitHub\n.\n\n\nSend bugs and feature requests to \nGitHub Issues\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#template-based-scaffolding-for-postgresql", 
            "text": "pg-generator  is a command line utility which generates files for each table and schema of a PostgreSQL database.   Reverse engineers PostgreSQL database,  Executes  nunjucks  templates for each table, schema and for database,  Makes database objects available to templates using  pg-structure .   pg-generator takes your burden of manually creating ORM files or any other files which are based on database structure.", 
            "title": "Template Based Scaffolding for PostgreSQL"
        }, 
        {
            "location": "/#installation", 
            "text": "$ npm install -g pg-generator", 
            "title": "Installation"
        }, 
        {
            "location": "/#sequelize-example", 
            "text": "$ pgen template sequelize -t sequelize-template\n$ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model  First command copies one of the builtin templates (sequelize) into target directory (sequelize-template). Second command generates files based on given template (sequelize-template) into target directory (model).", 
            "title": "Sequelize Example"
        }, 
        {
            "location": "/#basic-usage", 
            "text": "Use  pgen template  to copy one of the builtin templates or create your own template. (You can use base template for starting up.)  Use  pgen exec  to create files based on your template.", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/#template", 
            "text": "Creating a template from scratch is easy. Execute command below:  $ pgen template base -t my-template  To see a basic example execute following command from shell and examine files in tutorial-example directory.   $ pgen template tutorial -t tutorial-template  For a full fledged example which we use at Fortibase, see Sequelize Example above.", 
            "title": "Template"
        }, 
        {
            "location": "/#full-documentation", 
            "text": "Documentation is available on  pg-generator.com", 
            "title": "Full Documentation"
        }, 
        {
            "location": "/#special-thanks", 
            "text": "pg-structure  is developed under sponsorship of  Fortibase  and released as open source. See  license .  Also documentation is auto generated thanks to:   MkDocs  using a  theme  provided by  Read the Docs .  Markdown is generated by  jsdoc-to-markdown", 
            "title": "Special Thanks"
        }, 
        {
            "location": "/#contributions", 
            "text": "For contribution please send pull requests with tests on  GitHub .  Send bugs and feature requests to  GitHub Issues .", 
            "title": "Contributions"
        }, 
        {
            "location": "/Template/Template/", 
            "text": "Templates\n\n\npg-generator uses templates to generate files. A pg-generator template is a directory containing some special named directories and \nnunjucks\n files.\n\n\nDevelopers can use one of the pg-generator's builtin templates or create or modify templates according to their needs.", 
            "title": "Template"
        }, 
        {
            "location": "/Template/Template/#templates", 
            "text": "pg-generator uses templates to generate files. A pg-generator template is a directory containing some special named directories and  nunjucks  files.  Developers can use one of the pg-generator's builtin templates or create or modify templates according to their needs.", 
            "title": "Templates"
        }, 
        {
            "location": "/Template/Directories & Files/", 
            "text": "Special Template Directories \n Files\n\n\npg-generator templates contain several directories and files. Directories and files listed below are part of pg-generator templates. \nnunjucks\n templates located in those directories are executed once or more. They create files in same relative position as relative position to their parent directory.\n\n\nFor example\n:\n\n\nTemplate directory\n: .../sequelize\n\n\nTarget directory\n: .../model\n\n\nDatabase name\n: crm\n\n\nDatabase schemas\n: public\n\n\nDatabase tables\n: company, contact, product\n\n\n\n\n\n\n\n\nTemplate File\n\n\nCreated File\n\n\n\n\n\n\n\n\n\n\n.../sequelize/db/{db.name}.js.nunj.html\n\n\n.../model/crm.js\n\n\n\n\n\n\n.../sequelize/schema/{schema.name}.js.nunj.html\n\n\n.../model/public.js\n\n\n\n\n\n\n.../sequelize/schema/sub/{schema.name}.js.nunj.html\n\n\n.../model/sub/public.js\n\n\n\n\n\n\n.../sequelize/table/{table.name}.js.nunj.html\n\n\n.../model/company.js\n\n\n\n\n\n\n.../sequelize/table/{table.schema.name}/{table.name}.js.nunj.html\n\n\n.../model/public/company.js\n\n\n\n\n\n\n\n\n\"db\" directory\n\n\nTemplate files in \ndb\n are executed once for the database. Variables listed below are available in those template files. \n\n\n\n\n\n\n\n\nVarible Name\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\ndb\n\n\npg-structure database object to access database details.\n\n\nDB API\n\n\n\n\n\n\ncustom\n\n\nCustom data provided by custom data file.\n\n\nSee below\n\n\n\n\n\n\noptions\n\n\nOptions provided by custom options file.\n\n\nSee below\n\n\n\n\n\n\n{...}\n\n\nAny variable provided by index.js file's allData export.\n\n\nSee below\n\n\n\n\n\n\n{...}\n\n\nAny variable provided by index.js file's dbData export.\n\n\nSee below\n\n\n\n\n\n\n\n\n\"schema\" directory\n\n\nTemplate files in \nschema\n are executed for each PostgreSQL schema. Variables listed below are available in those template files. Files in this directory are created relative to the root of target directory.\n\n\n\n\n\n\n\n\nVarible Name\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nschema\n\n\npg-structure schema object to access database details.\n\n\nSchema API\n\n\n\n\n\n\ncustom\n\n\nCustom data provided by custom data file.\n\n\nSee below\n\n\n\n\n\n\noptions\n\n\nOptions provided by custom options file.\n\n\nSee below\n\n\n\n\n\n\n{...}\n\n\nAny variable provided by index.js file's allData export.\n\n\nSee below\n\n\n\n\n\n\n{...}\n\n\nAny variable provided by index.js file's schemaData export.\n\n\nSee below\n\n\n\n\n\n\n\n\n\"table\" directory\n\n\nTemplate files in \ntable\n are executed for each table. Variables listed below are available in those template files. Files in this directory are created relative to the root of target directory.\n\n\n\n\n\n\n\n\nVarible Name\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nschema\n\n\npg-structure table object to access database details.\n\n\nTable API\n\n\n\n\n\n\ncustom\n\n\nCustom data provided by custom data file.\n\n\nSee below\n\n\n\n\n\n\noptions\n\n\nOptions provided by custom options file.\n\n\nSee below\n\n\n\n\n\n\n{...}\n\n\nAny variable provided by index.js file's allData export.\n\n\nSee below\n\n\n\n\n\n\n{...}\n\n\nAny variable provided by index.js file's tableData export.\n\n\nSee below\n\n\n\n\n\n\n\n\n\"copy\" directory\n\n\nFiles in this directory are not processed by template engine and directly copied to target. Files in this directory are copied relative to the root of target directory.\n\n\n\"index.js\" file\n\n\nindex.js\n file is a node.js module file which exports \nallData\n, \ndbData\n, \nschemaData\n and \ntableData\n functions. Those functions are used to provide additional variables to template files. It makes pg-generator templates very flexible. See \nTemplate Module API\n\n\n'use strict';\n\n// This file is used for providing additional data to templates during generation phase.\n\nfunction allData(db) {\n    return {\n        extraAll: db.name\n    };\n}\n\nfunction dbData(db) {\n    return {\n        extra: db.name\n    };\n}\n\nfunction schemaData(schema) {\n    return {\n        extra: schema.name\n    };\n}\n\nfunction tableData(table) {\n    return {\n        extra: table.name\n    };\n}\n\nmodule.exports = {\n    allData: allData,\n    dbData: dbData,\n    schemaData: schemaData,\n    tableData: tableData\n};\n\n\n\n\nOther Directories \n Files\n\n\nOther directories and files do not have any meaning for pg-generator and they are not used. However you can create any directory to organize your partial templates.\n\n\nExternal Files\n\n\nExternal files are not part of the template. These optional files are set during file generation phase dynamically by options provided to \npgen\n command.\n\n\n$ pgen sequelize --datafile custom-data.js --optionsFile customOptions\n\n\n\nCustom Data File\n\n\nThis optional file is a node.js module which should export a simple JavaScript object. Exported object can be accessed with variable named \ncustom\n in template files. This data may be used very flexible ways for various reasons. For example builtin sequelize template uses this file for letting user to change some default behavior of template.\n\n\nExample\n\n\n'use strict';\n\nmodule.exports = {\n    Account: {\n        schema: 'super_schema',\n        customTableAttribute: '\ntableAtt\n',\n        attributes: {\n            id: { type: '\nfake_type_id\n', onUpdate: '\nUPDATE ME\n', customAttribute: 3 },\n            ss: { type: '\nfake_type_ss\n', specialAttribute: '\nok\n' },\n            dd: { type: '\nfake_type_dd\n', onUpdate: '\nUPDATE ME TOO\n', specA: 3, specB: 4, specC: 6 }\n        },\n        hasMany: {\n            HasContacts: {\n                as: 'CustomHasContacts'\n            }\n        },\n        belongsTo: {\n            Owner: {\n                as: 'CustomBelongsTo'\n            }\n        },\n        belongsToMany: {\n            ContactSecondCompanies: {\n                as: 'CustomBelongsToMany',\n                foreignKey: 'fake_id'\n            }\n        }\n    }\n};\n\n\n\n\nOptions File\n\n\nThis optional file is a node.js module which should export a simple JavaScript object. Exported object can be accessed with variable named \noptions\n in template files. Usage of this file is same as custom data file except variable name used for accessing data.", 
            "title": "Directories & Files"
        }, 
        {
            "location": "/Template/Directories & Files/#special-template-directories-files", 
            "text": "pg-generator templates contain several directories and files. Directories and files listed below are part of pg-generator templates.  nunjucks  templates located in those directories are executed once or more. They create files in same relative position as relative position to their parent directory.  For example :  Template directory : .../sequelize  Target directory : .../model  Database name : crm  Database schemas : public  Database tables : company, contact, product     Template File  Created File      .../sequelize/db/{db.name}.js.nunj.html  .../model/crm.js    .../sequelize/schema/{schema.name}.js.nunj.html  .../model/public.js    .../sequelize/schema/sub/{schema.name}.js.nunj.html  .../model/sub/public.js    .../sequelize/table/{table.name}.js.nunj.html  .../model/company.js    .../sequelize/table/{table.schema.name}/{table.name}.js.nunj.html  .../model/public/company.js     \"db\" directory  Template files in  db  are executed once for the database. Variables listed below are available in those template files.      Varible Name  Description  Example      db  pg-structure database object to access database details.  DB API    custom  Custom data provided by custom data file.  See below    options  Options provided by custom options file.  See below    {...}  Any variable provided by index.js file's allData export.  See below    {...}  Any variable provided by index.js file's dbData export.  See below     \"schema\" directory  Template files in  schema  are executed for each PostgreSQL schema. Variables listed below are available in those template files. Files in this directory are created relative to the root of target directory.     Varible Name  Description  Example      schema  pg-structure schema object to access database details.  Schema API    custom  Custom data provided by custom data file.  See below    options  Options provided by custom options file.  See below    {...}  Any variable provided by index.js file's allData export.  See below    {...}  Any variable provided by index.js file's schemaData export.  See below     \"table\" directory  Template files in  table  are executed for each table. Variables listed below are available in those template files. Files in this directory are created relative to the root of target directory.     Varible Name  Description  Example      schema  pg-structure table object to access database details.  Table API    custom  Custom data provided by custom data file.  See below    options  Options provided by custom options file.  See below    {...}  Any variable provided by index.js file's allData export.  See below    {...}  Any variable provided by index.js file's tableData export.  See below     \"copy\" directory  Files in this directory are not processed by template engine and directly copied to target. Files in this directory are copied relative to the root of target directory.  \"index.js\" file  index.js  file is a node.js module file which exports  allData ,  dbData ,  schemaData  and  tableData  functions. Those functions are used to provide additional variables to template files. It makes pg-generator templates very flexible. See  Template Module API  'use strict';\n\n// This file is used for providing additional data to templates during generation phase.\n\nfunction allData(db) {\n    return {\n        extraAll: db.name\n    };\n}\n\nfunction dbData(db) {\n    return {\n        extra: db.name\n    };\n}\n\nfunction schemaData(schema) {\n    return {\n        extra: schema.name\n    };\n}\n\nfunction tableData(table) {\n    return {\n        extra: table.name\n    };\n}\n\nmodule.exports = {\n    allData: allData,\n    dbData: dbData,\n    schemaData: schemaData,\n    tableData: tableData\n};  Other Directories   Files  Other directories and files do not have any meaning for pg-generator and they are not used. However you can create any directory to organize your partial templates.", 
            "title": "Special Template Directories &amp; Files"
        }, 
        {
            "location": "/Template/Directories & Files/#external-files", 
            "text": "External files are not part of the template. These optional files are set during file generation phase dynamically by options provided to  pgen  command.  $ pgen sequelize --datafile custom-data.js --optionsFile customOptions  Custom Data File  This optional file is a node.js module which should export a simple JavaScript object. Exported object can be accessed with variable named  custom  in template files. This data may be used very flexible ways for various reasons. For example builtin sequelize template uses this file for letting user to change some default behavior of template.  Example  'use strict';\n\nmodule.exports = {\n    Account: {\n        schema: 'super_schema',\n        customTableAttribute: ' tableAtt ',\n        attributes: {\n            id: { type: ' fake_type_id ', onUpdate: ' UPDATE ME ', customAttribute: 3 },\n            ss: { type: ' fake_type_ss ', specialAttribute: ' ok ' },\n            dd: { type: ' fake_type_dd ', onUpdate: ' UPDATE ME TOO ', specA: 3, specB: 4, specC: 6 }\n        },\n        hasMany: {\n            HasContacts: {\n                as: 'CustomHasContacts'\n            }\n        },\n        belongsTo: {\n            Owner: {\n                as: 'CustomBelongsTo'\n            }\n        },\n        belongsToMany: {\n            ContactSecondCompanies: {\n                as: 'CustomBelongsToMany',\n                foreignKey: 'fake_id'\n            }\n        }\n    }\n};  Options File  This optional file is a node.js module which should export a simple JavaScript object. Exported object can be accessed with variable named  options  in template files. Usage of this file is same as custom data file except variable name used for accessing data.", 
            "title": "External Files"
        }, 
        {
            "location": "/Template/Filters/", 
            "text": "Template Filters\n\n\nFilters are essentially functions that can be applied to variables. They are called with a pipe operator (|) and can take arguments. \nnunjucks\n filters alter output of variables in place. You can use all available builtin \nnunjucks filters\n. \n\n\n{{ table.name | lower }} -\n Converts name to lower case. (i.e. Member -\n member)\n\n\n\nThey can be chained:\n\n\n{{ table.name | plural | camelCase }} -\n Converts name to plural in camel case. (i.e. member_name -\n memberNames)\n\n\n\npg-generator filters\n\n\npg-generator offfers additional filters suitable for database scaffolding. Some of them are based on highly popular \ninflection\n npm module.\n\n\n\n\n\n\n\n\nFilter Name\n\n\nDescription\n\n\nBefore\n\n\nAfter\n\n\n\n\n\n\n\n\n\n\ncamelCase\n\n\nConverts string to camelcase.\n\n\nmember_name\n\n\nmemberName\n\n\n\n\n\n\npascalCase\n\n\nConverts string to pascal case.\n\n\nmember_name\n\n\nMemberName\n\n\n\n\n\n\nclassCase\n\n\nConverts string to class case.\n\n\nmember_name\n\n\nMemberName\n\n\n\n\n\n\nsnakeCase\n\n\nConverts string to snake case.\n\n\nmemberName\n\n\nmember_name\n\n\n\n\n\n\nsingular\n\n\nConverts string to singular.\n\n\nmember_names\n\n\nmember_name\n\n\n\n\n\n\nplural\n\n\nConverts string to plural.\n\n\nmember_name\n\n\nmember_names\n\n\n\n\n\n\nclearDefault\n\n\nClears PostgreSQL default values to be used in JS code.\n\n\n\"O''Reilly\"\n\n\n\"O'Reilly\"\n\n\n\n\n\n\nquote\n\n\nAdds quotes to string using \nJSON.stringify\n\n\nmember_name\n\n\n\"member_name\"\n\n\n\n\n\n\nstripPrefix(arg1, arg2, ...)\n\n\nStrips given texts and \nobject.name\n from beginning of string.\n\n\ncart_cart_id\n1\n\n\ncart_id\n\n\n\n\n\n\nstripSuffix(arg1, arg2, ...)\n\n\nStrips given texts and \nobject.name\n from end of string.\n\n\ncart_id\n2\n\n\ncart\n\n\n\n\n\n\nstrip(arg1, arg2, ...)\n\n\nStrips given texts and \nobject.name\n from string.\n\n\ncart_product_id\n3\n\n\ncart_id\n\n\n\n\n\n\npadRight(length, [char])\n\n\nPads string with optional char (default space) until it's length equals to length.\n\n\nmember\n4\n\n\nmember......\n\n\n\n\n\n\nrelationName\n\n\nConverts foreign key name to be used in a relationship. If string ends with '_id' or 'id', strips it (case insensitive). Otherwise adds given prefix at the beginning of the string.\n\n\ncompany_id, account\n\n\ncompany related_account\n\n\n\n\n\n\n\n\n*\n Footnotes\n\n\n*1 {{ 'cart_cart_id'    | stripPrefix('cart') }}        -\n cart_id\n   {{ 'cart_cart_id'    | stripPrefix(cart_table) }}    -\n cart_id (Assuming cart_table.name equals cart)\n   {{ 'a_b_c_table'     | stripPrefix('a', 'b') }}      -\n c_table\n*2 {{ 'cart_id'         | stripSuffix('id') }}          -\n cart\n*3 {{ 'cart_product_id' | strip('product') }}           -\n cart_id\n*4 {{ 'member'          | padRight(10) }}               -\n member    \n- Space padded until here.\n   {{ 'member'          | padRight(10, '_') }}          -\n member____\n\n\n\nAPI of Filter Functions\n\n\nclearDefault(string) \u21d2 \nstring\n \n \nboolean\n \n \nundefined\n\n\nClears SQL type escapes (Two quote '' to one quote ') and strips beginning and trailing quotes around string.\nAlso escapes result according to JSON standards.\n\n\nReturns\n: \nstring\n \n \nboolean\n \n \nundefined\n - - Default value to use in template.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstring\n\n\nstring\n\n\nDefault value returned from PostgreSQL.\n\n\n\n\n\n\n\n\n\n\nrelationName(str, [prefix]) \u21d2 \nstring\n\n\nConverts foreign key name to be used in a relationship. If string ends with '_id' or 'id', strips it (case insensitive).\nOtherwise adds given prefix at the beginning of the string. company_id -\n company, account -\n related_account\n\n\nReturns\n: \nstring\n - - Name for the belongsTo relationship.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstr\n\n\nstring\n\n\n\n\nForeign key name.\n\n\n\n\n\n\n[prefix]\n\n\nstring\n\n\nrelated\n\n\nPrefix to add if no given string does not contain 'id'.\n\n\n\n\n\n\n\n\n\n\nstripPrefix(source, arguments) \u21d2 \nstring\n\n\nVariadic function which strips given list of strings or object's names from start of the source string.\n\n\nReturns\n: \nstring\n - - Cleaned string.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nstring\n\n\nSource string to be cleaned.\n\n\n\n\n\n\narguments\n\n\nstring\n \n \nObject\n\n\nList of strings or objects (object's names) to delete from source string.\n\n\n\n\n\n\n\n\n\n\nstripSuffix(source, arguments) \u21d2 \nstring\n\n\nVariadic function which strips given list of strings or object's names from end of the source string.\n\n\nReturns\n: \nstring\n - - Cleaned string.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsource\n\n\nstring\n\n\nSource string to be cleaned.\n\n\n\n\n\n\narguments\n\n\nstring\n \n \nObject\n\n\nList of strings or objects (object's names) to delete from source string.\n\n\n\n\n\n\n\n\n\n\npadRight(str, count, [char]) \u21d2 \nstring\n\n\nPads given string's right side with given character (default space) to complete its length to count.\n\n\nReturns\n: \nstring\n - - Result string with length of count.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstr\n\n\nstring\n\n\n\n\nSource string.\n\n\n\n\n\n\ncount\n\n\nnumber\n\n\n\n\nTotal length of the result string.\n\n\n\n\n\n\n[char]\n\n\nstring\n\n\nspace\n\n\nPadding character", 
            "title": "Filters"
        }, 
        {
            "location": "/Template/Filters/#template-filters", 
            "text": "Filters are essentially functions that can be applied to variables. They are called with a pipe operator (|) and can take arguments.  nunjucks  filters alter output of variables in place. You can use all available builtin  nunjucks filters .   {{ table.name | lower }} -  Converts name to lower case. (i.e. Member -  member)  They can be chained:  {{ table.name | plural | camelCase }} -  Converts name to plural in camel case. (i.e. member_name -  memberNames)  pg-generator filters  pg-generator offfers additional filters suitable for database scaffolding. Some of them are based on highly popular  inflection  npm module.     Filter Name  Description  Before  After      camelCase  Converts string to camelcase.  member_name  memberName    pascalCase  Converts string to pascal case.  member_name  MemberName    classCase  Converts string to class case.  member_name  MemberName    snakeCase  Converts string to snake case.  memberName  member_name    singular  Converts string to singular.  member_names  member_name    plural  Converts string to plural.  member_name  member_names    clearDefault  Clears PostgreSQL default values to be used in JS code.  \"O''Reilly\"  \"O'Reilly\"    quote  Adds quotes to string using  JSON.stringify  member_name  \"member_name\"    stripPrefix(arg1, arg2, ...)  Strips given texts and  object.name  from beginning of string.  cart_cart_id 1  cart_id    stripSuffix(arg1, arg2, ...)  Strips given texts and  object.name  from end of string.  cart_id 2  cart    strip(arg1, arg2, ...)  Strips given texts and  object.name  from string.  cart_product_id 3  cart_id    padRight(length, [char])  Pads string with optional char (default space) until it's length equals to length.  member 4  member......    relationName  Converts foreign key name to be used in a relationship. If string ends with '_id' or 'id', strips it (case insensitive). Otherwise adds given prefix at the beginning of the string.  company_id, account  company related_account     *  Footnotes  *1 {{ 'cart_cart_id'    | stripPrefix('cart') }}        -  cart_id\n   {{ 'cart_cart_id'    | stripPrefix(cart_table) }}    -  cart_id (Assuming cart_table.name equals cart)\n   {{ 'a_b_c_table'     | stripPrefix('a', 'b') }}      -  c_table\n*2 {{ 'cart_id'         | stripSuffix('id') }}          -  cart\n*3 {{ 'cart_product_id' | strip('product') }}           -  cart_id\n*4 {{ 'member'          | padRight(10) }}               -  member     - Space padded until here.\n   {{ 'member'          | padRight(10, '_') }}          -  member____", 
            "title": "Template Filters"
        }, 
        {
            "location": "/Template/Filters/#api-of-filter-functions", 
            "text": "clearDefault(string) \u21d2  string     boolean     undefined  Clears SQL type escapes (Two quote '' to one quote ') and strips beginning and trailing quotes around string.\nAlso escapes result according to JSON standards.  Returns :  string     boolean     undefined  - - Default value to use in template.       Param  Type  Description      string  string  Default value returned from PostgreSQL.      relationName(str, [prefix]) \u21d2  string  Converts foreign key name to be used in a relationship. If string ends with '_id' or 'id', strips it (case insensitive).\nOtherwise adds given prefix at the beginning of the string. company_id -  company, account -  related_account  Returns :  string  - - Name for the belongsTo relationship.       Param  Type  Default  Description      str  string   Foreign key name.    [prefix]  string  related  Prefix to add if no given string does not contain 'id'.      stripPrefix(source, arguments) \u21d2  string  Variadic function which strips given list of strings or object's names from start of the source string.  Returns :  string  - - Cleaned string.       Param  Type  Description      source  string  Source string to be cleaned.    arguments  string     Object  List of strings or objects (object's names) to delete from source string.      stripSuffix(source, arguments) \u21d2  string  Variadic function which strips given list of strings or object's names from end of the source string.  Returns :  string  - - Cleaned string.       Param  Type  Description      source  string  Source string to be cleaned.    arguments  string     Object  List of strings or objects (object's names) to delete from source string.      padRight(str, count, [char]) \u21d2  string  Pads given string's right side with given character (default space) to complete its length to count.  Returns :  string  - - Result string with length of count.       Param  Type  Default  Description      str  string   Source string.    count  number   Total length of the result string.    [char]  string  space  Padding character", 
            "title": "API of Filter Functions"
        }, 
        {
            "location": "/Builtin Templates/Tutorial/", 
            "text": "This template may be used to learn basics of pg-generator templates. Files in this template are not complicated and provides an easy start.\n\n\nUsage\n\n\n$ pgen template tutorial -t tutorial-template\n$ pgen exec tutorial-template -d our_crm -u user -p tOpSeCrEt -t tutorial", 
            "title": "Tutorial"
        }, 
        {
            "location": "/Builtin Templates/Tutorial/#usage", 
            "text": "$ pgen template tutorial -t tutorial-template\n$ pgen exec tutorial-template -d our_crm -u user -p tOpSeCrEt -t tutorial", 
            "title": "Usage"
        }, 
        {
            "location": "/Builtin Templates/Base/", 
            "text": "This template may be used to create your own templates from scratch. It generates all necessary boilerplate files.\n\n\nUsage\n\n\n$ pgen template base -t base-template\n$ pgen exec base-template -d our_crm -u user -p tOpSeCrEt -t my-template", 
            "title": "Base"
        }, 
        {
            "location": "/Builtin Templates/Base/#usage", 
            "text": "$ pgen template base -t base-template\n$ pgen exec base-template -d our_crm -u user -p tOpSeCrEt -t my-template", 
            "title": "Usage"
        }, 
        {
            "location": "/Builtin Templates/Sequelize/", 
            "text": "This template is successor of \nsequelize-pg-generator\n module which is used for creating \nsequelize\n models from existing PostgreSQL database.\n\n\nUsage\n\n\n$ pgen template sequelize -t sequelize-template\n$ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model\n\n\n\nFeatures:\n\n\n\n\nGenerated model files are as similar as possible to official Sequelize documents.\n\n\nCreated files are static and transparent. They are not used to create models dynamically. So debugging and seeing what is generated is very easy for humans.\n\n\nDocumented,\n\n\nTested,\n\n\nNo Dependencies on generated files,\n\n\nMulti schema support,\n\n\nOne to many relation support (hasMany and belongsTo),\n\n\nMany to many relation support (belongsToMany),\n\n\nInter-schema relation support. (i.e. public.account table to other_schema.cutomer table),\n\n\nUltimately configurable and customizable by modifying template files,\n\n\nNo configuration file to modify,\n\n\nCLI support,\n\n\nDefault smart naming of models and relations,\n\n\nVery easy to override auto generated files,\n\n\nTable Specific Configuration.\n\n\n\n\nTemplate Utility Functions\n\n\nTemplates have passed a variable called \nutil\n which provides some useful utilities.\n\n\ntype: {{ util.sequelizeType(column) }}  -\n type: DataTypes.INTEGER\n\n\n\n\n\nuniqueRelatedTables(table) \u21d2 \nArray.\npgStructure.table\n\n\nReturns an array of all tables related to this table. Duplicates are removed, so every related table in the result array is unique.\n\n\nKind\n: global function\n\n\nReturns\n: \nArray.\npgStructure.table\n - - List of related tables.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntable\n\n\npgStructure.table\n\n\npg-structure table\n to search related tables for.\n\n\n\n\n\n\n\n\n\n\nsequelizeType(column) \u21d2 \nstring\n\n\nReturns Sequelize ORM data type for given column.\n\n\nKind\n: global function\n\n\nReturns\n: \nstring\n - - Sequelize data type.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncolumn\n\n\npgStructure.column\n\n\npg-structure column object\n.\n\n\n\n\n\n\n\n\nExample\n  \n\n\n{{ util.sequelizeType() }}        // DataTypes.INTEGER(3)\n{{ sequelizeType('Sequelize') }}  // Sequelize.INTEGER(3)\n\n\n\nRelations\n\n\nRelations are detected automatically. One to many (hasMany), many to one (belongsTo) and many to many (belongsToMany) relations are detected automatically. If two tables are joined via a join table this module detects it automatically and generates many to many sequelize relations. If a table has more than one foreign key, then it is considered join table. In reality it may not be a join table. However it is impossible to detect that.\n\n\nSmart Default Naming of Aliases\n\n\nThis template uses table names or schema table names for model naming. For relations it uses foreign key names and relation names from your database. (You are naming your relations in database meaningfully right?) Default template is based on camelCase naming. You can easily change it to use snake_case or PascalCase by using provided filters. Naming conventions are based on Sequelize module suggestions and generated explicitly with 'as' parameter. Aliases can be turned of by providing a custom options file and setting \ngenerateAliases\n false.\n\n\n module.exports = { generateAliases: false };\n\n\n\n\n\n\n\n\n\nType of Object\n\n\nFilters\n\n\nDefault Naming \n Alias Rule\n\n\n\n\n\n\n\n\n\n\ntable\n\n\nclassCase\n\n\nTable name.\n\n\n\n\n\n\nhasMany\n\n\nplural, classCase, stripPrefix(source)\n\n\nRelation name in database. Table name stripped from beginning.\n\n\n\n\n\n\nbelongsTo\n\n\nsingular, classCase, relationName\n\n\nForeign key column name. If name ends with 'id' or '_id' it will be stripped. Otherwise 'related' is added at the beginning to prevent it from clashing with column name.\n\n\n\n\n\n\nbelongsToMany\n\n\nplural, classCase, relationName('')\n\n\nJoin table name + foreign key in join table which refers to other table. If name ends with 'id' or '_id' it will be stripped.\n\n\n\n\n\n\n\n\n\n\nAs an example for the schema above aliases are created as follows. Please note names of foreign keys in \ncart_line_item\n table: \nproduct_id\n and \ncart\n. To demonstrate different naming rules 'product_id' contains \nid\n suffix while 'cart' not.\n\n\n\n\n\n\n\n\nRelation\n\n\nAs\n\n\nWhy\n\n\n\n\n\n\n\n\n\n\nProduct.hasMany\n\n\nCartLineItems\n\n\nproduct_\ncart_line_items\n: Plural of relation name. Table name is stripped from the beginning of relation name.\n\n\n\n\n\n\nProduct.belongsToMany\n\n\nCartLineItemCarts\n\n\ncart_line_item\n + \ncart\n + \ns\n: Plural of join table name + foreign key column in join table referring to other table. '_id' suffix is stripped from column name.\n\n\n\n\n\n\nCart.belongsToMany\n\n\nCartLineItemProducts\n\n\ncart_line_item\n + \nproduct\n_id\n + \ns\n: Plural of join table name + foreign key column in join table referring to other table. '_id' suffix is stripped from column name.\n\n\n\n\n\n\nCart.hasMany\n\n\nCartLineItems\n\n\ncart_\ncart_line_items\n: Plural of relation name. Table name is stripped from the beginning of relation name.\n\n\n\n\n\n\nCartLineItem.belongsTo\n\n\nRelatedCart\n\n\nRelated\n + \ncart\n: Singular of foreign key column prefixed with \n'Related'\n. Otherwise 'Cart' relation and 'cart' column collide in same casing (camelCase, ClassCase etc.)\n\n\n\n\n\n\nCartLineItem.belongsTo\n\n\nProduct\n\n\nproduct\n_id\n: Singular of foreign key column. Id suffix is stripped from column name. Otherwise 'ProductId' relation and 'product_id' column collide in same casing (camelCase, ClassCase etc.)\n\n\n\n\n\n\n\n\nFAQ\n\n\nI have multiple schema with same table names in them. How can I prevent collision of my model names?\n\n\nIn your template;\n\n\n\n\nRename \n'sequelize/table/definition/{table.name}.js.nunj.html'\n as \n'sequelize/table/definition/{table.schema.name}-{table.name}.js.nunj.html'\n.\n\n\nChange \nmodelName macro\n in \n'sequelize/table/definition/{table.schema.name}-{table.name}.js.nunj.html'\n as \n{{ (table.schema.name + table.name) | classCase }}\n.\n\n\nAdd \n'{table.schema.name}-'\n string to \n'sequelize.import'\n and \n'require'\n parts in \n'sequelize/db/index.js.nunj.html'\n file to match new model file's names.", 
            "title": "Sequelize"
        }, 
        {
            "location": "/Builtin Templates/Sequelize/#usage", 
            "text": "$ pgen template sequelize -t sequelize-template\n$ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model", 
            "title": "Usage"
        }, 
        {
            "location": "/Builtin Templates/Sequelize/#features", 
            "text": "Generated model files are as similar as possible to official Sequelize documents.  Created files are static and transparent. They are not used to create models dynamically. So debugging and seeing what is generated is very easy for humans.  Documented,  Tested,  No Dependencies on generated files,  Multi schema support,  One to many relation support (hasMany and belongsTo),  Many to many relation support (belongsToMany),  Inter-schema relation support. (i.e. public.account table to other_schema.cutomer table),  Ultimately configurable and customizable by modifying template files,  No configuration file to modify,  CLI support,  Default smart naming of models and relations,  Very easy to override auto generated files,  Table Specific Configuration.", 
            "title": "Features:"
        }, 
        {
            "location": "/Builtin Templates/Sequelize/#template-utility-functions", 
            "text": "Templates have passed a variable called  util  which provides some useful utilities.  type: {{ util.sequelizeType(column) }}  -  type: DataTypes.INTEGER   uniqueRelatedTables(table) \u21d2  Array. pgStructure.table  Returns an array of all tables related to this table. Duplicates are removed, so every related table in the result array is unique.  Kind : global function  Returns :  Array. pgStructure.table  - - List of related tables.       Param  Type  Description      table  pgStructure.table  pg-structure table  to search related tables for.      sequelizeType(column) \u21d2  string  Returns Sequelize ORM data type for given column.  Kind : global function  Returns :  string  - - Sequelize data type.       Param  Type  Description      column  pgStructure.column  pg-structure column object .     Example     {{ util.sequelizeType() }}        // DataTypes.INTEGER(3)\n{{ sequelizeType('Sequelize') }}  // Sequelize.INTEGER(3)", 
            "title": "Template Utility Functions"
        }, 
        {
            "location": "/Builtin Templates/Sequelize/#relations", 
            "text": "Relations are detected automatically. One to many (hasMany), many to one (belongsTo) and many to many (belongsToMany) relations are detected automatically. If two tables are joined via a join table this module detects it automatically and generates many to many sequelize relations. If a table has more than one foreign key, then it is considered join table. In reality it may not be a join table. However it is impossible to detect that.  Smart Default Naming of Aliases  This template uses table names or schema table names for model naming. For relations it uses foreign key names and relation names from your database. (You are naming your relations in database meaningfully right?) Default template is based on camelCase naming. You can easily change it to use snake_case or PascalCase by using provided filters. Naming conventions are based on Sequelize module suggestions and generated explicitly with 'as' parameter. Aliases can be turned of by providing a custom options file and setting  generateAliases  false.   module.exports = { generateAliases: false };     Type of Object  Filters  Default Naming   Alias Rule      table  classCase  Table name.    hasMany  plural, classCase, stripPrefix(source)  Relation name in database. Table name stripped from beginning.    belongsTo  singular, classCase, relationName  Foreign key column name. If name ends with 'id' or '_id' it will be stripped. Otherwise 'related' is added at the beginning to prevent it from clashing with column name.    belongsToMany  plural, classCase, relationName('')  Join table name + foreign key in join table which refers to other table. If name ends with 'id' or '_id' it will be stripped.      As an example for the schema above aliases are created as follows. Please note names of foreign keys in  cart_line_item  table:  product_id  and  cart . To demonstrate different naming rules 'product_id' contains  id  suffix while 'cart' not.     Relation  As  Why      Product.hasMany  CartLineItems  product_ cart_line_items : Plural of relation name. Table name is stripped from the beginning of relation name.    Product.belongsToMany  CartLineItemCarts  cart_line_item  +  cart  +  s : Plural of join table name + foreign key column in join table referring to other table. '_id' suffix is stripped from column name.    Cart.belongsToMany  CartLineItemProducts  cart_line_item  +  product _id  +  s : Plural of join table name + foreign key column in join table referring to other table. '_id' suffix is stripped from column name.    Cart.hasMany  CartLineItems  cart_ cart_line_items : Plural of relation name. Table name is stripped from the beginning of relation name.    CartLineItem.belongsTo  RelatedCart  Related  +  cart : Singular of foreign key column prefixed with  'Related' . Otherwise 'Cart' relation and 'cart' column collide in same casing (camelCase, ClassCase etc.)    CartLineItem.belongsTo  Product  product _id : Singular of foreign key column. Id suffix is stripped from column name. Otherwise 'ProductId' relation and 'product_id' column collide in same casing (camelCase, ClassCase etc.)", 
            "title": "Relations"
        }, 
        {
            "location": "/Builtin Templates/Sequelize/#faq", 
            "text": "I have multiple schema with same table names in them. How can I prevent collision of my model names?  In your template;   Rename  'sequelize/table/definition/{table.name}.js.nunj.html'  as  'sequelize/table/definition/{table.schema.name}-{table.name}.js.nunj.html' .  Change  modelName macro  in  'sequelize/table/definition/{table.schema.name}-{table.name}.js.nunj.html'  as  {{ (table.schema.name + table.name) | classCase }} .  Add  '{table.schema.name}-'  string to  'sequelize.import'  and  'require'  parts in  'sequelize/db/index.js.nunj.html'  file to match new model file's names.", 
            "title": "FAQ"
        }, 
        {
            "location": "/API/Template Module API/", 
            "text": "Functions\n\n\n\n\nallData(db)\n \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in every template file.\nThis function is executed for each generated file.\n\n\n\n\ndbData(db)\n \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in templates located in\ndb directory. This function is executed for each generated file resulted from templates in db directory.\n\n\n\n\nschemaData(schema)\n \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in templates located in\nschema directory. This function is executed for each generated file resulted from templates in schema directory.\n\n\n\n\ntableData(table)\n \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in templates located in\ntable directory. This function is executed for each generated file resulted from templates in table directory.\n\n\n\n\n\n\n\n\nallData(db) \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in every template file.\nThis function is executed for each generated file.\n\n\nKind\n: global function\n\n\nReturns\n: \nObject\n - - Object to be merged with template variables.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndb\n\n\npgStructure.db\n\n\npg-structure db object\n.\n\n\n\n\n\n\n\n\n\n\ndbData(db) \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in templates located in\ndb directory. This function is executed for each generated file resulted from templates in db directory.\n\n\nKind\n: global function\n\n\nReturns\n: \nObject\n - - Object to be merged with template variables.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndb\n\n\npgStructure.db\n\n\npg-structure db object\n.\n\n\n\n\n\n\n\n\n\n\nschemaData(schema) \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in templates located in\nschema directory. This function is executed for each generated file resulted from templates in schema directory.\n\n\nKind\n: global function\n\n\nReturns\n: \nObject\n - - Object to be merged with template variables.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nschema\n\n\npgStructure.schema\n\n\npg-structure schema object\n.\n\n\n\n\n\n\n\n\n\n\ntableData(table) \u21d2 \nObject\n\n\nObject returned from this function will be merged with template variables and available in templates located in\ntable directory. This function is executed for each generated file resulted from templates in table directory.\n\n\nKind\n: global function\n\n\nReturns\n: \nObject\n - - Object to be merged with template variables.  \n\n\n\n\n\n\n\n\nParam\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntable\n\n\npgStructure.table\n\n\npg-structure table object\n.", 
            "title": "Template Module API"
        }, 
        {
            "location": "/API/Template Module API/#functions", 
            "text": "allData(db)  \u21d2  Object  Object returned from this function will be merged with template variables and available in every template file.\nThis function is executed for each generated file.   dbData(db)  \u21d2  Object  Object returned from this function will be merged with template variables and available in templates located in\ndb directory. This function is executed for each generated file resulted from templates in db directory.   schemaData(schema)  \u21d2  Object  Object returned from this function will be merged with template variables and available in templates located in\nschema directory. This function is executed for each generated file resulted from templates in schema directory.   tableData(table)  \u21d2  Object  Object returned from this function will be merged with template variables and available in templates located in\ntable directory. This function is executed for each generated file resulted from templates in table directory.", 
            "title": "Functions"
        }, 
        {
            "location": "/API/Template Module API/#alldatadb-object", 
            "text": "Object returned from this function will be merged with template variables and available in every template file.\nThis function is executed for each generated file.  Kind : global function  Returns :  Object  - - Object to be merged with template variables.       Param  Type  Description      db  pgStructure.db  pg-structure db object .", 
            "title": "allData(db) \u21d2 Object"
        }, 
        {
            "location": "/API/Template Module API/#dbdatadb-object", 
            "text": "Object returned from this function will be merged with template variables and available in templates located in\ndb directory. This function is executed for each generated file resulted from templates in db directory.  Kind : global function  Returns :  Object  - - Object to be merged with template variables.       Param  Type  Description      db  pgStructure.db  pg-structure db object .", 
            "title": "dbData(db) \u21d2 Object"
        }, 
        {
            "location": "/API/Template Module API/#schemadataschema-object", 
            "text": "Object returned from this function will be merged with template variables and available in templates located in\nschema directory. This function is executed for each generated file resulted from templates in schema directory.  Kind : global function  Returns :  Object  - - Object to be merged with template variables.       Param  Type  Description      schema  pgStructure.schema  pg-structure schema object .", 
            "title": "schemaData(schema) \u21d2 Object"
        }, 
        {
            "location": "/API/Template Module API/#tabledatatable-object", 
            "text": "Object returned from this function will be merged with template variables and available in templates located in\ntable directory. This function is executed for each generated file resulted from templates in table directory.  Kind : global function  Returns :  Object  - - Object to be merged with template variables.       Param  Type  Description      table  pgStructure.table  pg-structure table object .", 
            "title": "tableData(table) \u21d2 Object"
        }
    ]
}